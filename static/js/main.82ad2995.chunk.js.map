{"version":3,"sources":["Settings.tsx","Button.tsx","Display.tsx","TwoWindowsVersion.tsx","OneWindowVersion.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Settings","props","errorStyle","backgroundColor","error","borderColor","className","style","type","value","maxValue","min","onChange","e","onChangeMaxValue","currentTarget","valueAsNumber","startValue","onChangeStartValue","Button","onClickHandler","disable","title","onClick","disabled","Display","disablSet","disablInc","onstyle","color","message","TwoWindowsVersion","setHandler","num","resetHandler","disablRecet","incHandler","OneWindowVersion","twoWindowVersion","changeTwoWindowVersion","setHandlerTwoWindow","App","useState","setNum","setDisablInc","setDisablRecet","setStartValue","setMaxValue","setDisablSet","setMessage","setError","version","setVersion","setTwoWindowVersion","useEffect","valueString","localStorage","getItem","newValue","JSON","parse","setItem","stringify","newStartValue","newMaxValue","incNum","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82ad2995.chunk.js","sourcesContent":["import React, {ChangeEvent, ChangeEventHandler, useState} from 'react';\r\n\r\nimport {stat} from \"fs\";\r\n\r\nexport type SettingsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    onChangeMaxValue:(newMaxValue:number)=>void\r\n    onChangeStartValue:(newStartValue:number)=>void\r\n    error:boolean\r\n}\r\n\r\n\r\nexport const Settings: React.FC<SettingsType> = (props) => {\r\n\r\n    const onChangeMaxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeMaxValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    const onChangeStartValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeStartValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    const errorStyle = {\r\n        backgroundColor:props.error ? \"pink\" : \"\",\r\n        borderColor:props.error ? \"red\" : \"\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"settings\">\r\n            <div>\r\n                <span className=\"spanValue\">Max value: </span>\r\n                <input\r\n                    style={errorStyle}\r\n                    type=\"number\"\r\n                    value={props.maxValue}\r\n                    min={0}\r\n                    onChange={onChangeMaxValueHandler}\r\n                />\r\n            </div>\r\n            <div>\r\n                <span className=\"spanValue\">Start value:</span>\r\n                <input\r\n                    style={errorStyle}\r\n                    type=\"number\"\r\n                    value={props.startValue}\r\n                    min={0}\r\n                    onChange={onChangeStartValueHandler}\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}","import './App.css';\r\n\r\ntype ButtonType = {\r\n    disable:boolean\r\n    onClickHandler: ()=>void\r\n    title:string\r\n}\r\n\r\n\r\nexport const Button:React.FC<ButtonType> = (props) => {\r\n\r\n    const {onClickHandler, disable, title } = props\r\n\r\n    return (\r\n     \r\n         <div >\r\n             <button onClick={onClickHandler} disabled={disable} >{title}</button>\r\n         </div>\r\n        \r\n        \r\n    \r\n    )\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\ntype DisplayType = {\r\n    value: number\r\n    disablInc: boolean\r\n    disablSet: boolean\r\n    error: boolean\r\n    message: boolean\r\n\r\n}\r\n\r\nexport const Display: React.FC<DisplayType> = (props) => {\r\n\r\n    const { disablSet, disablInc, value, error, message } = props\r\n\r\n    let onstyle = {\r\n        color: disablInc ? \"red\" : \"black\"\r\n    }\r\n\r\n    return (\r\n        message\r\n            ?\r\n            <div className={\"scoreboard\"}>\r\n                {error ?\r\n                    <div className=\"errortext\">Incorrect value!</div>\r\n                    :\r\n                    <div className=\"message\">Enter values and press 'SET'</div>\r\n                }\r\n            </div>\r\n\r\n            :\r\n            <div className={\"scoreboard\"}>\r\n                <div style={onstyle} className={\"value\"}>{value}</div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}","import {Settings} from \"./Settings\";\r\nimport {Button} from \"./Button\";\r\nimport {Display} from \"./Display\";\r\nimport React from \"react\";\r\n\r\nexport type TwoWindowsVersionType = {\r\n    startValue: number\r\n    maxValue: number\r\n    error: boolean\r\n    onChangeStartValue: (newStartValue: number) => void\r\n    onChangeMaxValue: (newStartValue: number) => void\r\n    setHandler: () => void\r\n    disablSet: boolean\r\n    num: number\r\n    disablInc: boolean\r\n    message: boolean\r\n    resetHandler: () => void\r\n    disablRecet: boolean\r\n    incHandler:()=>void\r\n}\r\n\r\n\r\nexport const TwoWindowsVersion = (props:TwoWindowsVersionType) => {\r\n\r\n    const {\r\n        startValue, maxValue,\r\n        error, onChangeStartValue,\r\n        onChangeMaxValue, setHandler,\r\n        disablSet, num,\r\n        disablInc, message,\r\n        resetHandler, disablRecet,incHandler\r\n    } = props\r\n\r\n\r\n    return (<>\r\n        <div className=\"containBlock\">\r\n            <Settings\r\n                startValue={startValue}\r\n                maxValue={maxValue}\r\n                error={error}\r\n                onChangeStartValue={onChangeStartValue}\r\n                onChangeMaxValue={onChangeMaxValue}\r\n            />\r\n            <div className={\"buttons\"}>\r\n                <Button title={\"SET\"}\r\n                        onClickHandler={setHandler}\r\n                        disable={disablSet}\r\n                />\r\n            </div>\r\n        </div>\r\n        <div className=\"containBlock\">\r\n            <Display\r\n                value={num}\r\n                disablInc={disablInc}\r\n                disablSet={disablSet}\r\n                error={error}\r\n                message={message}\r\n            />\r\n            <div className={\"buttons\"}>\r\n                <Button\r\n                    title={\"INC\"}\r\n                    onClickHandler={incHandler}\r\n                    disable={disablInc}\r\n                />\r\n                <Button\r\n                    title={\"RESET\"}\r\n                    onClickHandler={resetHandler}\r\n                    disable={disablRecet}\r\n                />\r\n\r\n            </div>\r\n        </div>\r\n    </>)\r\n}","import {Settings} from \"./Settings\";\r\nimport {Button} from \"./Button\";\r\nimport {Display} from \"./Display\";\r\nimport React from \"react\";\r\n\r\n\r\nexport type OneWindowVersionType = {\r\n    twoWindowVersion:boolean\r\n    num:number\r\n    disablInc:boolean\r\n    disablSet:boolean\r\n    error:boolean\r\n    message:boolean\r\n    changeTwoWindowVersion:()=>void\r\n    incHandler:()=>void\r\n    resetHandler:()=>void\r\n    disablRecet:boolean\r\n    startValue:number\r\n    maxValue:number\r\n    onChangeStartValue:(newStartValue:number)=>void\r\n    onChangeMaxValue:(newMaxValue:number)=>void\r\n    setHandlerTwoWindow:()=>void\r\n}\r\n\r\n\r\nexport const OneWindowVersion = (props:OneWindowVersionType) => {\r\n\r\n    const {twoWindowVersion,\r\n        num,\r\n        disablInc,\r\n        disablSet,\r\n        error,\r\n        message,\r\n        changeTwoWindowVersion,\r\n        incHandler,\r\n    resetHandler,\r\n        disablRecet,\r\n    startValue,\r\n    maxValue,\r\n    onChangeStartValue,\r\n        onChangeMaxValue,\r\n        setHandlerTwoWindow,} = props\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {!twoWindowVersion\r\n                ?\r\n                <div className=\"containBlock\">\r\n                    <Display\r\n                        value={num}\r\n                        disablInc={disablInc}\r\n                        disablSet={disablSet}\r\n                        error={error}\r\n                        message={message}\r\n                    />\r\n                    <div className={\"buttons\"}>\r\n                        <Button title={\"SET\"}\r\n                                onClickHandler={changeTwoWindowVersion}\r\n                                disable={twoWindowVersion}\r\n                        />\r\n                        <Button\r\n                            title={\"INC\"}\r\n                            onClickHandler={incHandler}\r\n                            disable={disablInc}\r\n                        />\r\n                        <Button\r\n                            title={\"RESET\"}\r\n                            onClickHandler={resetHandler}\r\n                            disable={disablRecet}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className=\"containBlock\">\r\n                    <Settings\r\n                        startValue={startValue}\r\n                        maxValue={maxValue}\r\n                        error={error}\r\n                        onChangeStartValue={onChangeStartValue}\r\n                        onChangeMaxValue={onChangeMaxValue}\r\n                    />\r\n                    <div className={\"buttons\"}>\r\n                        <Button title={\"SET\"}\r\n                                onClickHandler={setHandlerTwoWindow}\r\n                                disable={disablSet}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {Display} from './Display'\nimport {Settings} from './Settings'\nimport {Button} from './Button'\nimport {TwoWindowsVersion} from \"./TwoWindowsVersion\";\nimport {OneWindowVersion} from \"./OneWindowVersion\";\n\n\nfunction App() {\n\n    const [num, setNum] = useState<number>(0)\n    const [disablInc, setDisablInc] = useState<boolean>(false)\n    const [disablRecet, setDisablRecet] = useState<boolean>(true)\n    const [startValue, setStartValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n    const [disablSet, setDisablSet] = useState<boolean>(true)\n    const [message, setMessage] = useState<boolean>(false)\n    const [error, setError] = useState<boolean>(false)\n    const [version, setVersion] = useState<boolean>(true)\n    const [twoWindowVersion, setTwoWindowVersion] = useState<boolean>(false)\n\n    useEffect(()=>{\n        let valueString = localStorage.getItem('counterValue')\n        if (valueString) {\n            let newValue = JSON.parse(valueString)\n            setNum(newValue)\n        }\n    }, [])\n\n    useEffect(()=>{\n        localStorage.setItem('counterValue', JSON.stringify(num))\n    }, [num])\n\n\n    useEffect(()=>{\n        let startValue = localStorage.getItem('minValue')\n        if (startValue) {\n            let newStartValue = JSON.parse(startValue)\n            setStartValue(newStartValue)\n        }\n    },[])\n\n    useEffect(()=>{\n        localStorage.setItem('minValue', JSON.stringify(startValue))\n    },[startValue])\n\n\n\n    useEffect(()=>{\n        let maxValue = localStorage.getItem('maxValue')\n        if (maxValue) {\n            let newMaxValue = JSON.parse(maxValue)\n            setMaxValue(newMaxValue)\n        }\n    },[])\n\n    useEffect(()=>{\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\n    },[maxValue])\n\n\n\n    const incHandler = () => {\n        const incNum = num + 1\n        setDisablSet(true)\n        setNum(incNum)\n        setDisablRecet(false)\n        if (incNum === maxValue) {\n            setDisablInc(true)\n        }\n    }\n\n    const resetHandler = () => {\n        setNum(startValue)\n        setDisablInc(false)\n        setDisablRecet(true)\n    }\n\n    const setHandler = () => {\n        setDisablSet(true)\n        setNum(startValue)\n        setDisablInc(false)\n        setMessage(false)\n    }\n\n    const setHandlerTwoWindow = () => {\n        setTwoWindowVersion(false)\n        setDisablSet(true)\n        setNum(startValue)\n        setDisablInc(false)\n        setMessage(false)\n\n    }\n\n    const onChangeStartValue = (newStartValue: number) => {\n        setStartValue(newStartValue)\n        setDisablRecet(true)\n        setMessage(true)\n        if (newStartValue < 0 || newStartValue >= maxValue) {\n            setError(true)\n            setDisablSet(true)\n        } else {\n            setError(false)\n            setDisablSet(false)\n            setMessage(true)\n            setDisablInc(true)\n        }\n    }\n\n    const onChangeMaxValue = (newMaxValue: number) => {\n        setMaxValue(newMaxValue)\n        setMessage(true)\n        setDisablRecet(true)\n        if (newMaxValue < 0 || newMaxValue <= startValue) {\n            setError(true)\n            setDisablSet(true)\n        } else {\n            setError(false)\n            setDisablSet(false)\n            setMessage(true)\n            setDisablInc(true)\n        }\n    }\n\n    const changeTwoWindowVersion = () => {\n        setTwoWindowVersion(!twoWindowVersion)\n    }\n\n    const changeVersion = () => {\n        setVersion(!version)\n    }\n\n    return (<>\n            <button onClick={changeVersion}>◻◻/◻</button>\n            <div className=\"App\">\n                {version\n                    ?\n                    <TwoWindowsVersion\n                        startValue={startValue}\n                        maxValue={maxValue}\n                        error={error}\n                        onChangeStartValue={onChangeStartValue}\n                        onChangeMaxValue={onChangeMaxValue}\n                        setHandler={setHandler}\n                        disablSet={disablSet}\n                        num={num}\n                        disablInc={disablInc}\n                        message={message}\n                        resetHandler={resetHandler}\n                        disablRecet={disablRecet}\n                        incHandler={incHandler}\n                    />\n                    :\n                    <OneWindowVersion\n                        twoWindowVersion={twoWindowVersion}\n                        num={num}\n                        disablInc={disablInc}\n                        disablSet={disablSet}\n                        error={error}\n                        message={message}\n                        changeTwoWindowVersion={changeTwoWindowVersion}\n                        incHandler={incHandler}\n                        resetHandler={resetHandler}\n                        disablRecet={disablRecet}\n                        startValue={startValue}\n                        maxValue={maxValue}\n                        onChangeStartValue={onChangeStartValue}\n                        onChangeMaxValue={onChangeMaxValue}\n                        setHandlerTwoWindow={setHandlerTwoWindow}\n\n                    />}\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}